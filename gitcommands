git stash list [<options>]  //shows the list of stashes
git stash list --date=local //the date when the stash was created
git stash apply // apply the stash
git stash show [<options>] [<stash>]
git stash show -p // shows the list of detailed commits in the stash
git stash drop [-q|--quiet] [<stash>]
git stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]
git stash branch <branchname> [<stash>]
git stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]
	     [-u|--include-untracked] [-a|--all] [-m|--message <message>]
	     [--] [<pathspec>…​]]
git stash clear
git stash create [<message>]
git stash store [-m|--message <message>] [-q|--quiet] <commit>

------------log----------------
git log //shows commit history
git log -5 //show most recent 5 commits
git log -All //show all previous commits
git log --after "2014-02-01" --before "2014-02-02" //to see the commits that occurred before and after

------fetch--------
git fetch //It will download the remote content but not update your local repo's working state

------tags--------------
git fetch --tags //to fetch latest tags
git checkout tags/tagname -n branch_name //checks out the tag to a new branch

---diff-----------------
git diff [filename] //Show differences between index and working tree; that is, changes you haven't staged to commit:
git diff --cached [filename] //Show differences between current commit and index; that is, what you're about to commit (--staged does exactly the same thing, use what you like):
git diff HEAD [filename] // Show differences between current commit and working tree:

-rebase------------------

git rebase develop // rebases local branch to latest develop
git rev-list --left-right --count develop...feature_branch //develop is x commit ahead and y commit behind of feature branch

-merge --------------------
git merge --abort //aborts the merge
git fetch //fetches any new changes or remote branches
git checkout remote_branch //checks out remote_branch to local with the same name as remote_branch

---------------------------
git branch //lists all local branches
git branch -a //list all reomote + local branches
git branch -r //lists all remote branches

---------------------------
git branch -d branch_name //delete the local branch
git checkout -b branch_name //creates and checkout remote branch with new branch_name
git branch --set-upstream-to=origin/<branch> //set the local branch to upstream

--------------------------------
git log //shows all commit for that branch

---commit-----
git commit -m "initial commit"

---push-----
git push origin "branch name" //commit will be pushed to the remote with branch name
git push -f origin "remote branch" //to forcefully commit local changes to remote

---A new repo from an existing project and push to github
Say you’ve got an existing project that you want to start tracking with git.

echo "# sdcvsdvv" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/codegenesis/sdcvsdvv.git
git push -u origin master

----------------------------------------------------------------------------------------------------
How to cut the release branch from develop branch and prepare hotfix

Semantic Versioning:
Given a version number MAJOR.MINOR.PATCH, increment the:

MAJOR version when you make incompatible API changes,
MINOR version when you add functionality in a backwards compatible manner, and
PATCH version when you make backwards compatible bug fixes.

This leads to the following "rule":

A Release branch should contain the MAJOR and the MINOR number (e.g. release/1.9)
A Hotfix branch (which contains bugfixes) should also contain the PATCH number (e.g. hotfix/1.9.1)

Release branches
Release branches are created when the develop branch is at a stable point and release specific changes need to be made, such as bumping version numbers, etc. At that point, develop should be branched and the changes made before ultimately merging it into master and tagging the release. There should only be one active release branch at a time. Until the current release is wrapped up, merged into master and deleted, development of the next release should take place on develop. When develop reaches another state of stability for release, another release branch is be created.

May branch off from: develop

$ git checkout -b release-1.2 develop
$ ./bump-version.sh 1.2
$ git commit -a -m "Bumped version number to 1.2"
Bug fixes made on a release branch may be merged back into develop continuously if needed, though ultimately they will be merged in when the release is finalized.

Must merge back into: develop and master

$ git checkout master
$ git merge --no-ff release-1.2
$ git tag 1.2

$ git checkout develop
$ git merge --no-ff release-1.2
At this point the release branch is safe to delete, since the changes are reflected in develop and master. If the branch is remote, remove the remote branch also. $ git branch -d release-1.2

Hotfix branches
Patches that need to be made to the most recent production release are applied to a hotfix branch off master. For older releases, hotfixes branch off a support-* branch (explained later.)

May branch off from: master

$ git checkout -b hotfix-1.2.1 master
$ ./bump-version.sh 1.2.1
$ git commit -a -m "Bumped version number to 1.2.1"

$ git commit -m "Fixed severe production problem"
Must merge back into: develop and master

$ git checkout master
$ git merge --no-ff hotfix-1.2.1
$ git tag 1.2.1
Merge into develop only if there is no current release branch, otherwise, merge into release branch instead.

$ git checkout develop
$ git merge --no-ff hotfix-1.2.1
Finally, delete. $ git branch -d hotfix-1.2.1
